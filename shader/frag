uniform int outputID;
uniform sampler2D envmap;
uniform vec3 eyePos;
varying vec3 normal;
varying vec3 vertex;

#define PI 3.1415926

vec3 shadeDiffuseFromEye();

vec3 shadePhong(vec3 lightPos);

vec3 shadeEnvmapReflection();

void main()
{
    if(outputID == 0)
    {
        gl_FragColor = vec4(shadeDiffuseFromEye(), 1.0);
        return;
    }
    if(outputID == 1)
    {
        gl_FragColor = vec4(shadePhong(vec3(10, 10, 10)), 1.0);
        return;
    }
    if(outputID == 2)
    {
        gl_FragColor = vec4(shadeEnvmapReflection(), 1.0);
        return;
    }
    if(outputID == 3)
    {
        // Do something interesting here for extra credit.
        // gl_FragColor = vec4(???, 1.0);
        // return;
    }
    // ...
}

vec3 shadeDiffuseFromEye()
{
    vec3 n = normalize(normal);
    vec3 out_vec = normalize(eyePos - vertex);
    float diffuse = abs(dot(out_vec, n));
    return vec3(diffuse);
}

vec3 shadePhong(vec3 lightPos)
{   
    // Compute Phong shading here, choose any color you like
    // make sure there are specular highlights
    // given vars: eyePos, lightPos, normal, vertex
    vec3 n = normalize(normal); 
    float La = 0.4;
    vec3 I = vec3(3.0, 2.0, 5.0);
    //float r = length(lightPos); 
    vec3 l = normalize(lightPos-vertex);
    vec3 kd = normalize(0.2*vec3(1.0, 1.0, 1.0));
    vec3 ks = normalize(1.5* vec3(1.0, 1.0, 1.0));
    vec3 h = (normalize(eyePos-vertex) + l)/(length(normalize(eyePos-vertex)+l));
    float p = 80.0;
    float L = La + dot(kd,I)*max(0.0, dot(n, l)) + dot(ks,I)*(pow(max(0.0, dot(n, h)), p));
    return L*vec3(0.16, 0.1475, 0.15);
}

float atan2(float y, float x) {
    float a = atan(y/x);
    if (x > 0.0) {
        return a;
    } else if (x < 0.0 && y >= 0.0) {
        return a + PI;
    } else if (x < 0.0 && y < 0.0) {
        return a - PI;
    } else if (x == 0.0 && y > 0.0) {
        return 0.5*PI;
    } else if (x == 0.0 && y < 0.0) {
        return -0.5*PI;
    } else if (x == 0.0 && y == 0.0){
        return 0.0;
    }
}

vec3 shadeEnvmapReflection()
{ 
    // compute environment mapping based on reflection direction here
    // -compute the reflection direction using eyePos, normal and vertex.
    // -convert the reflection direction to spherical coordinates (theta, phi). 
    // (note that the up vector is along +Z axis)
    // get color from envmapp using (theta, phi).
    // func "vec4 texture2D(sampler2D tex, vec2 uv)" gets colors from textures. 
    vec3 n = normalize(normal);
    vec3 i = normalize(eyePos - vertex);
    vec3 o = normalize(2.0*(dot(i, n))*n - i);
    float theta = atan2(o.y,o.x); 
    float phi = atan2(pow(o.x*o.x + o.y*o.y,0.5),o.z);

  //  GLuint tex = makeTex("envmap/envmap.png");
   // if (!tex) tex = makeTex("../envmap/envmap.png");
    vec4 colors = texture2D(envmap, vec2(theta/(2.0*PI), phi/PI));
    return vec3(colors.x, colors.y, colors.z);
    
   // return vec3(0.5, 0.5, 0.5);
}
